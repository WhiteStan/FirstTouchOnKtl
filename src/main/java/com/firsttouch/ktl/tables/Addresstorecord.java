/*
 * This file is generated by jOOQ.
 */
package com.firsttouch.ktl.tables;


import com.firsttouch.ktl.App;
import com.firsttouch.ktl.Indexes;
import com.firsttouch.ktl.Keys;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Addresstorecord extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>app.addresstorecord</code>
     */
    public static final Addresstorecord ADDRESSTORECORD = new Addresstorecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>app.addresstorecord.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>app.addresstorecord.addressId</code>.
     */
    public final TableField<Record, Integer> ADDRESSID = createField(DSL.name("addressId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>app.addresstorecord.recordId</code>.
     */
    public final TableField<Record, Integer> RECORDID = createField(DSL.name("recordId"), SQLDataType.INTEGER.nullable(false), this, "");

    private Addresstorecord(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Addresstorecord(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>app.addresstorecord</code> table reference
     */
    public Addresstorecord(String alias) {
        this(DSL.name(alias), ADDRESSTORECORD);
    }

    /**
     * Create an aliased <code>app.addresstorecord</code> table reference
     */
    public Addresstorecord(Name alias) {
        this(alias, ADDRESSTORECORD);
    }

    /**
     * Create a <code>app.addresstorecord</code> table reference
     */
    public Addresstorecord() {
        this(DSL.name("addresstorecord"), null);
    }

    public <O extends Record> Addresstorecord(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, ADDRESSTORECORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : App.APP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ADDRESSTORECORD_ADDRESS_IDX, Indexes.ADDRESSTORECORD_RECORD_IDX);
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_ADDRESSTORECORD_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.ADDRESS, Keys.RECORD);
    }

    private transient Address _address;
    private transient com.firsttouch.ktl.tables.Record _record;

    public Address address() {
        if (_address == null)
            _address = new Address(this, Keys.ADDRESS);

        return _address;
    }

    public com.firsttouch.ktl.tables.Record record() {
        if (_record == null)
            _record = new com.firsttouch.ktl.tables.Record(this, Keys.RECORD);

        return _record;
    }

    @Override
    public Addresstorecord as(String alias) {
        return new Addresstorecord(DSL.name(alias), this);
    }

    @Override
    public Addresstorecord as(Name alias) {
        return new Addresstorecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Addresstorecord rename(String name) {
        return new Addresstorecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Addresstorecord rename(Name name) {
        return new Addresstorecord(name, null);
    }
}
