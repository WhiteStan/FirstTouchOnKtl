/*
 * This file is generated by jOOQ.
 */
package com.firsttouch.ktl.tables.records;


import com.firsttouch.ktl.tables.Address;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AddressRecord extends UpdatableRecordImpl<AddressRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>app.address.id</code>.
     */
    public AddressRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>app.address.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>app.address.Address</code>.
     */
    public AddressRecord setAddress(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>app.address.Address</code>.
     */
    public String getAddress() {
        return (String) get(1);
    }

    /**
     * Setter for <code>app.address.City</code>.
     */
    public AddressRecord setCity(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>app.address.City</code>.
     */
    public String getCity() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Address.ADDRESS.ID;
    }

    @Override
    public Field<String> field2() {
        return Address.ADDRESS.ADDRESS_;
    }

    @Override
    public Field<String> field3() {
        return Address.ADDRESS.CITY;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAddress();
    }

    @Override
    public String component3() {
        return getCity();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAddress();
    }

    @Override
    public String value3() {
        return getCity();
    }

    @Override
    public AddressRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AddressRecord value2(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public AddressRecord value3(String value) {
        setCity(value);
        return this;
    }

    @Override
    public AddressRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AddressRecord
     */
    public AddressRecord() {
        super(Address.ADDRESS);
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    public AddressRecord(Integer id, String address, String city) {
        super(Address.ADDRESS);

        setId(id);
        setAddress(address);
        setCity(city);
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    public AddressRecord(com.firsttouch.ktl.tables.pojos.Address value) {
        super(Address.ADDRESS);

        if (value != null) {
            setId(value.getId());
            setAddress(value.getAddress());
            setCity(value.getCity());
        }
    }
}
