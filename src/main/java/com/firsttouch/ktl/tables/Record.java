/*
 * This file is generated by jOOQ.
 */
package com.firsttouch.ktl.tables;


import com.firsttouch.ktl.App;
import com.firsttouch.ktl.Keys;
import com.firsttouch.ktl.tables.records.RecordRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Record extends TableImpl<RecordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>app.record</code>
     */
    public static final Record RECORD = new Record();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecordRecord> getRecordType() {
        return RecordRecord.class;
    }

    /**
     * The column <code>app.record.id</code>.
     */
    public final TableField<RecordRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>app.record.FirstName</code>.
     */
    public final TableField<RecordRecord, String> FIRSTNAME = createField(DSL.name("FirstName"), SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>app.record.LastName</code>.
     */
    public final TableField<RecordRecord, String> LASTNAME = createField(DSL.name("LastName"), SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>app.record.Phone</code>.
     */
    public final TableField<RecordRecord, String> PHONE = createField(DSL.name("Phone"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private Record(Name alias, Table<RecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private Record(Name alias, Table<RecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>app.record</code> table reference
     */
    public Record(String alias) {
        this(DSL.name(alias), RECORD);
    }

    /**
     * Create an aliased <code>app.record</code> table reference
     */
    public Record(Name alias) {
        this(alias, RECORD);
    }

    /**
     * Create a <code>app.record</code> table reference
     */
    public Record() {
        this(DSL.name("record"), null);
    }

    public <O extends org.jooq.Record> Record(Table<O> child, ForeignKey<O, RecordRecord> key) {
        super(child, key, RECORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : App.APP;
    }

    @Override
    public UniqueKey<RecordRecord> getPrimaryKey() {
        return Keys.KEY_RECORD_PRIMARY;
    }

    @Override
    public Record as(String alias) {
        return new Record(DSL.name(alias), this);
    }

    @Override
    public Record as(Name alias) {
        return new Record(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Record rename(String name) {
        return new Record(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Record rename(Name name) {
        return new Record(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
